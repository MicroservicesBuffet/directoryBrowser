//this was autogenerated by a tool. Do not modify! Use partial
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
namespace Generated;
[ApiController]
[Route("api/[controller]/[action]")]    
public partial class AdvancedSearch_ApplicationDBContext_ModifiedFileController : Controller
{
    private ISearchDataModifiedFile _search;
    public AdvancedSearch_ApplicationDBContext_ModifiedFileController(ISearchDataModifiedFile search)
	{
        _search=search;
	}
    [HttpGet]
    public async Task<long> GetAllCount()
    {
       return await _search.GetAllCount();
        
    }
    
    [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> GetAll()
    {
        await foreach(var item in _search.ModifiedFileFind_AsyncEnumerable(null))
        {
            yield return (ModifiedFile_Table)item!;
        }
        
    }
    [HttpGet]   
    public async IAsyncEnumerable<ModifiedFile_Table> GetSearchSimple(string ColumnName, string Operator, string Value){
           var search = new SearchModifiedFile();
           search.PageSize = int.MaxValue - 1;
        search.SearchFields = new SearchField<eModifiedFileColumns>[1];
        search.SearchFields[0]= new SearchField<eModifiedFileColumns>();
        if(Enum.TryParse< eModifiedFileColumns >(ColumnName,true ,out var valField)){
            search.SearchFields[0].FieldName = valField;
        }
        else
        {
            search.SearchFields[0].FieldName = (eModifiedFileColumns )int.Parse(ColumnName);;
        }
        search.SearchFields[0].Value= Value;
        var criteria= SearchCriteria.None;
        if(Enum.TryParse<SearchCriteria>(Operator,true,out var value))
        {
            criteria = value;
        }
        else
        {
            criteria = (SearchCriteria)int.Parse(Operator);
        }
        
        search.SearchFields[0].Criteria= criteria;
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(search))
        {
            yield return (ModifiedFile_Table)item!;
        }

    }
    [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> GetWithSearch(SearchModifiedFile s)
    {
        await foreach(var item in _search.ModifiedFileFind_AsyncEnumerable(s))
        {
            yield return (ModifiedFile_Table)item!;
        }
        
    }
    [HttpGet]
    public async Task<long> GetWithSearchCount(SearchModifiedFile? s)
    {
        if (s == null)
            return await GetAllCount();

        return await _search.GetAllCount(s);
    }

//has one key
    [HttpGet]
    public async Task<ModifiedFile_Table?> GetSingle(long id){
        var data=await _search.ModifiedFileGetSingle(id);
       if(data == null)
        return null;
       return (ModifiedFile_Table)data;
    }

        
    [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> IDFile_EqualValue( long  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.ModifiedFileSimpleSearch_IDFile(sc, value))
        {
            yield return (ModifiedFile_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> IDFile_DifferentValue( long  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.ModifiedFileSimpleSearch_IDFile(sc, value))
        {
            yield return (ModifiedFile_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<ModifiedFile_Table> IDFile_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  long value){
        await foreach(var item in _search.ModifiedFileSimpleSearch_IDFile(sc,value))
        {
            yield return (ModifiedFile_Table)item!;
        }
    }

         
     [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> IDFile_EqualValues( long[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eModifiedFileColumns.IDFile,value);
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {
        
            yield return (ModifiedFile_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> IDFile_DifferentValues( long[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eModifiedFileColumns.IDFile,value);
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {
        
            yield return (ModifiedFile_Table)item!;
        }
    }
              [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> IDFile_LessOrEqual(long  val)
    {
        var sc = SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eModifiedFileColumns.IDFile  , val.ToString());
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {

            yield return (ModifiedFile_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> IDFile_Less(long  val)
    {
        var sc = SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.Less, eModifiedFileColumns.IDFile  , val.ToString());
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {

            yield return (ModifiedFile_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> IDFile_GreaterOrEqual(long  val)
    {
        var sc = SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eModifiedFileColumns.IDFile  , val.ToString());
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {

            yield return (ModifiedFile_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> IDFile_Greater(long  val)
    {
        var sc = SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eModifiedFileColumns.IDFile  , val.ToString());
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {

            yield return (ModifiedFile_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> IDFile_Between( long  valStart, long valEnd)
    {
        var sc = SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.Between, eModifiedFileColumns.IDFile, valStart +","+ valEnd);
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {

            yield return (ModifiedFile_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> IDFile_NotBetween( long  valStart, long valEnd)
    {
        var sc = SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eModifiedFileColumns.IDFile, valStart +","+ valEnd);
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {

            yield return (ModifiedFile_Table)item!;
        }
    }    

        
    [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> FullPathFile_EqualValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Equal;
        await foreach (var item in _search.ModifiedFileSimpleSearch_FullPathFile(sc, value))
        {
            yield return (ModifiedFile_Table)item!;
        }
    }
    [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> FullPathFile_DifferentValue( string  value)
    {
        var sc = GeneratorFromDB.SearchCriteria.Different;
        await foreach (var item in _search.ModifiedFileSimpleSearch_FullPathFile(sc, value))
        {
            yield return (ModifiedFile_Table)item!;
        }
    }
    [HttpGet]
    public  async IAsyncEnumerable<ModifiedFile_Table> FullPathFile_SimpleSearch(GeneratorFromDB.SearchCriteria sc,  string value){
        await foreach(var item in _search.ModifiedFileSimpleSearch_FullPathFile(sc,value))
        {
            yield return (ModifiedFile_Table)item!;
        }
    }

         
     [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> FullPathFile_EqualValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.InArray,eModifiedFileColumns.FullPathFile,value);
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {
        
            yield return (ModifiedFile_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> FullPathFile_DifferentValues( string[]  values)
    {
        string? value=null;
        if(values.Length>0)
            value=string.Join( ",",values);
        var sc=SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.NotInArray,eModifiedFileColumns.FullPathFile,value);
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {
        
            yield return (ModifiedFile_Table)item!;
        }
    }
         [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> FullPathFile_Contains(string  val)
    {
        var sc = SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.Contains, eModifiedFileColumns.FullPathFile  , val);
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {

            yield return (ModifiedFile_Table)item!;
        }
    }

     [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> FullPathFile_EndsWith(string  val)
    {
        var sc = SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.EndsWith, eModifiedFileColumns.FullPathFile  , val);
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {

            yield return (ModifiedFile_Table)item!;
        }
    }

      [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> FullPathFile_StartsWith(string  val)
    {
        var sc = SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.StartsWith, eModifiedFileColumns.FullPathFile  , val);
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {

            yield return (ModifiedFile_Table)item!;
        }
    }


              [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> FullPathFile_LessOrEqual(string  val)
    {
        var sc = SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.LessOrEqual, eModifiedFileColumns.FullPathFile  , val.ToString());
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {

            yield return (ModifiedFile_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> FullPathFile_Less(string  val)
    {
        var sc = SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.Less, eModifiedFileColumns.FullPathFile  , val.ToString());
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {

            yield return (ModifiedFile_Table)item!;
        }
    }
     
      [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> FullPathFile_GreaterOrEqual(string  val)
    {
        var sc = SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.GreaterOrEqual, eModifiedFileColumns.FullPathFile  , val.ToString());
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {

            yield return (ModifiedFile_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> FullPathFile_Greater(string  val)
    {
        var sc = SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.Greater, eModifiedFileColumns.FullPathFile  , val.ToString());
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {

            yield return (ModifiedFile_Table)item!;
        }
    }
     [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> FullPathFile_Between( string  valStart, string valEnd)
    {
        var sc = SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.Between, eModifiedFileColumns.FullPathFile, valStart +","+ valEnd);
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {

            yield return (ModifiedFile_Table)item!;
        }
    }    

    [HttpGet]
    public async IAsyncEnumerable<ModifiedFile_Table> FullPathFile_NotBetween( string  valStart, string valEnd)
    {
        var sc = SearchModifiedFile.FromSearch(GeneratorFromDB.SearchCriteria.NotBetween, eModifiedFileColumns.FullPathFile, valStart +","+ valEnd);
        await foreach (var item in _search.ModifiedFileFind_AsyncEnumerable(sc))
        {

            yield return (ModifiedFile_Table)item!;
        }
    }    

            


    


}//end class

