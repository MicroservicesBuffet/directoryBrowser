//this was autogenerated by a tool. Do not modify! Use partial
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using GeneratorFromDB;
using Microsoft.EntityFrameworkCore;

namespace Generated;

//ADDED by code generator
public interface I_test_Table 
{
        int? id { get; set; }
                string? name { get; set; }
        }

public class test_Table : I_test_Table
{
    public static MetaTable metaData = new("test");
    static test_Table (){
        MetaColumn mc=null;
        mc=new ("id","int?",true);                
        mc.IsPk = false ;
        mc.TypeJS = "number";
        metaData.AddColumn(mc);
        mc=new ("name","string",true);                
        mc.IsPk = false ;
        mc.TypeJS = "string|null";
        metaData.AddColumn(mc);
 //done with foreach property in static constructor
    }
        public int? id { get; set; }
                public string? name { get; set; }
             public void CopyFrom(I_test_Table other)  {
        this.id = other.id;
                this.name = other.name;
            }

    public static explicit operator test_Table?(test obj) { 
        if(obj == null)
            return null;
            //System.Diagnostics.Debugger.Break();
         var ret= new test_Table();
         ret.CopyFrom(obj as I_test_Table );
         return ret;
     }
     public static explicit operator test?(test_Table obj) { 
        if(obj == null)
            return null;
            //System.Diagnostics.Debugger.Break();
         var ret= new test();
         ret.CopyFrom(obj as I_test_Table) ;
         return ret;
     }



}
public partial class test : I_test_Table
{
     public void CopyFrom(I_test_Table other)  {
        this.id = other.id;
                this.name = other.name;
            }

}

//for test 
public enum etestColumns {
    None = 0
        ,id 
                ,name 
        }

//finish ADDED by code generator

[Keyless]

public partial class test
{
    public int? id { get; set; }

    [StringLength(200)]
    [Unicode(false)]
    public string? name { get; set; }
}


