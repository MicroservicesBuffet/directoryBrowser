//this was autogenerated by a tool. Do not modify! Use partial
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using GeneratorFromDB;
using Microsoft.EntityFrameworkCore;

namespace Generated;

//ADDED by code generator
public interface I_ModifiedFile_Table 
{
        long IDFile { get; set; }
                string FullPathFile { get; set; }
        }

public class ModifiedFile_Table : I_ModifiedFile_Table
{
    public static MetaTable metaData = new("ModifiedFile");
    static ModifiedFile_Table (){
        MetaColumn mc=null;
        mc=new ("IDFile","long",false);                
        mc.IsPk = true ;
        mc.TypeJS = "number";
        metaData.AddColumn(mc);
        mc=new ("FullPathFile","string",false);                
        mc.IsPk = false ;
        mc.TypeJS = "string";
        metaData.AddColumn(mc);
 //done with foreach property in static constructor
    }
        public long IDFile { get; set; }
                public string FullPathFile { get; set; }
             public void CopyFrom(I_ModifiedFile_Table other)  {
        this.IDFile = other.IDFile;
                this.FullPathFile = other.FullPathFile;
            }

    public static explicit operator ModifiedFile_Table?(ModifiedFile obj) { 
        if(obj == null)
            return null;
            //System.Diagnostics.Debugger.Break();
         var ret= new ModifiedFile_Table();
         ret.CopyFrom(obj as I_ModifiedFile_Table );
         return ret;
     }
     public static explicit operator ModifiedFile?(ModifiedFile_Table obj) { 
        if(obj == null)
            return null;
            //System.Diagnostics.Debugger.Break();
         var ret= new ModifiedFile();
         ret.CopyFrom(obj as I_ModifiedFile_Table) ;
         return ret;
     }



}
public partial class ModifiedFile : I_ModifiedFile_Table
{
     public void CopyFrom(I_ModifiedFile_Table other)  {
        this.IDFile = other.IDFile;
                this.FullPathFile = other.FullPathFile;
            }

}

//for ModifiedFile 
public enum eModifiedFileColumns {
    None = 0
        ,IDFile 
                ,FullPathFile 
        }

//finish ADDED by code generator


public partial class ModifiedFile
{
    [Key]
    public long IDFile { get; set; }

    [StringLength(500)]
    public string FullPathFile { get; set; } = null!;

    [InverseProperty("IDFileNavigation")]
    public virtual ICollection<ModifiedUserFile> ModifiedUserFile { get; } = new List<ModifiedUserFile>();
}


