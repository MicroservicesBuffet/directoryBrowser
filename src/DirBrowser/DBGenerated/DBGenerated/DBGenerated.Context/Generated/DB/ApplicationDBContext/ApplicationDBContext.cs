//this was autogenerated by a tool. Do not modify! Use partial
using System;
using System.Collections.Generic;
using GeneratorFromDB;
using Microsoft.EntityFrameworkCore;

namespace Generated;

public partial class ApplicationDBContext : DbContext
{
    public ApplicationDBContext(DbContextOptions<ApplicationDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ModifiedFile> ModifiedFile { get; set; }
    //public virtual DbSet<ModifiedFile_Table> ModifiedFile_Table { get; set; }

    public virtual DbSet<ModifiedUser> ModifiedUser { get; set; }
    //public virtual DbSet<ModifiedUser_Table> ModifiedUser_Table { get; set; }

    public virtual DbSet<ModifiedUserFile> ModifiedUserFile { get; set; }
    //public virtual DbSet<ModifiedUserFile_Table> ModifiedUserFile_Table { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ModifiedUser>(entity =>
        {
            entity.HasKey(e => e.IDUser).HasName("PK_UsersModified");
        });

        modelBuilder.Entity<ModifiedUserFile>(entity =>
        {
            entity.HasOne(d => d.IDFileNavigation).WithMany(p => p.ModifiedUserFile)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ModifiedUserFile_ModifiedFile");

            entity.HasOne(d => d.IDUserNavigation).WithMany(p => p.ModifiedUserFile)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ModifiedUserFile_ModifiedUser");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}

//added new
public partial class ApplicationDBContext : DbContext
{
    public static MetaDB  metaData = new("ApplicationDBContext");
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void ApplicationDBContext_AddTables(){
        metaData.AddTable(ModifiedFile_Table.metaData);
            metaData.AddTable(ModifiedUser_Table.metaData);
            metaData.AddTable(ModifiedUserFile_Table.metaData);
        AllDB.Singleton.AddDb(metaData);
    }

        public async Task<ModifiedFile[]> ModifiedFileFind_Array( SearchModifiedFile? search){
 
        IQueryable<ModifiedFile> data= this.ModifiedFile ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<ModifiedFile> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<ModifiedFile> ModifiedFileGetAll(){
        return this.ModifiedFileFind_AsyncEnumerable(null);
    }
        public async  Task<ModifiedFile> ModifiedFileSave(ModifiedFile val){

        var data= await ModifiedFileSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<ModifiedFile[]> ModifiedFileSaveMultiple(params ModifiedFile[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.ModifiedFile.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<ModifiedFile> ModifiedFileSimpleSearch(GeneratorFromDB.SearchCriteria sc, eModifiedFileColumns colToSearch, string value){
        
 var search = SearchModifiedFile.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eModifiedFileColumns>();
                    orderBy.FieldName = eModifiedFileColumns.IDFile;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eModifiedFileColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.ModifiedFileFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<ModifiedFile> ModifiedFileFind_AsyncEnumerable(SearchModifiedFile? search){
 
        IQueryable<ModifiedFile> data= this.ModifiedFile ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<ModifiedFile> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> ModifiedFileCount( SearchModifiedFile? search){
     
        IQueryable<ModifiedFile> data= this.ModifiedFile ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> ModifiedFileDelete(long id){

        var item = await ModifiedFileGetSingle(id);
        if(item == null)
            return false;
       this.ModifiedFile.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> ModifiedFileModify(ModifiedFile val ){
        //do the attach
        /* var item = await ModifiedFileGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        return true; 
    }
    



    public Task<ModifiedFile?> ModifiedFileGetSingle(long id){
        return this.ModifiedFile.FirstOrDefaultAsync(e => e.IDFile == id);
    }
    

    public IAsyncEnumerable<ModifiedFile> ModifiedFileFind_AsyncEnumerable(SearchModifiedFile? search){
        IQueryable<ModifiedFile> data= this.ModifiedFile ;
        if(search == null){
                        return data.OrderByDescending(e => e.IDFile).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<ModifiedFile> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<ModifiedUser[]> ModifiedUserFind_Array( SearchModifiedUser? search){
 
        IQueryable<ModifiedUser> data= this.ModifiedUser ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<ModifiedUser> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<ModifiedUser> ModifiedUserGetAll(){
        return this.ModifiedUserFind_AsyncEnumerable(null);
    }
        public async  Task<ModifiedUser> ModifiedUserSave(ModifiedUser val){

        var data= await ModifiedUserSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<ModifiedUser[]> ModifiedUserSaveMultiple(params ModifiedUser[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.ModifiedUser.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<ModifiedUser> ModifiedUserSimpleSearch(GeneratorFromDB.SearchCriteria sc, eModifiedUserColumns colToSearch, string value){
        
 var search = SearchModifiedUser.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eModifiedUserColumns>();
                    orderBy.FieldName = eModifiedUserColumns.IDUser;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eModifiedUserColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.ModifiedUserFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<ModifiedUser> ModifiedUserFind_AsyncEnumerable(SearchModifiedUser? search){
 
        IQueryable<ModifiedUser> data= this.ModifiedUser ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<ModifiedUser> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> ModifiedUserCount( SearchModifiedUser? search){
     
        IQueryable<ModifiedUser> data= this.ModifiedUser ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> ModifiedUserDelete(long id){

        var item = await ModifiedUserGetSingle(id);
        if(item == null)
            return false;
       this.ModifiedUser.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> ModifiedUserModify(ModifiedUser val ){
        //do the attach
        /* var item = await ModifiedUserGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        return true; 
    }
    



    public Task<ModifiedUser?> ModifiedUserGetSingle(long id){
        return this.ModifiedUser.FirstOrDefaultAsync(e => e.IDUser == id);
    }
    

    public IAsyncEnumerable<ModifiedUser> ModifiedUserFind_AsyncEnumerable(SearchModifiedUser? search){
        IQueryable<ModifiedUser> data= this.ModifiedUser ;
        if(search == null){
                        return data.OrderByDescending(e => e.IDUser).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<ModifiedUser> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

        public async Task<ModifiedUserFile[]> ModifiedUserFileFind_Array( SearchModifiedUserFile? search){
 
        IQueryable<ModifiedUserFile> data= this.ModifiedUserFile ;
        if(search == null){
            return await data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        IQueryable<ModifiedUserFile> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return await ret.ToArrayAsync();
    }

    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileGetAll(){
        return this.ModifiedUserFileFind_AsyncEnumerable(null);
    }
        public async  Task<ModifiedUserFile> ModifiedUserFileSave(ModifiedUserFile val){

        var data= await ModifiedUserFileSaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<ModifiedUserFile[]> ModifiedUserFileSaveMultiple(params ModifiedUserFile[] values){

        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.ModifiedUserFile.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }

    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearch(GeneratorFromDB.SearchCriteria sc, eModifiedUserFileColumns colToSearch, string value){
        
 var search = SearchModifiedUserFile.FromSearch(sc,colToSearch,value);
 /*
        var orderBy = new GeneratorFromDB.OrderBy<eModifiedUserFileColumns>();
                    orderBy.FieldName = eModifiedUserFileColumns.ID;
                orderBy.Asc = false;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue-1;
        var s = new GeneratorFromDB.SearchField<eModifiedUserFileColumns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        */
        var data = this.ModifiedUserFileFind_AsyncEnumerable(search);
        return data;
    }   
/*
    public IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileFind_AsyncEnumerable(SearchModifiedUserFile? search){
 
        IQueryable<ModifiedUserFile> data= this.ModifiedUserFile ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        IQueryable<ModifiedUserFile> =search.TransformToOrder(data);
        if(search.PageSize>1)
            ret= ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
*/
    public Task<long> ModifiedUserFileCount( SearchModifiedUserFile? search){
     
        IQueryable<ModifiedUserFile> data= this.ModifiedUserFile ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    

    //oneKey
    
    public  async Task<bool> ModifiedUserFileDelete(long id){

        var item = await ModifiedUserFileGetSingle(id);
        if(item == null)
            return false;
       this.ModifiedUserFile.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> ModifiedUserFileModify(ModifiedUserFile val ){
        //do the attach
        /* var item = await ModifiedUserFileGetSingle(val.??ID?????);
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        */
        return true; 
    }
    



    public Task<ModifiedUserFile?> ModifiedUserFileGetSingle(long id){
        return this.ModifiedUserFile.FirstOrDefaultAsync(e => e.ID == id);
    }
    

    public IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileFind_AsyncEnumerable(SearchModifiedUserFile? search){
        IQueryable<ModifiedUserFile> data= this.ModifiedUserFile ;
        if(search == null){
                        return data.OrderByDescending(e => e.ID).AsAsyncEnumerable();
                    }
        data = search.TransformToWhere(data); 
        
        IQueryable<ModifiedUserFile> ret= search.TransformToOrder(data);
        if(search.PageNumber>1)
            ret=ret.Skip((search.PageNumber-1)*search.PageSize);
            
        ret=ret.Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    
    }

}
public interface I_InsertDataApplicationDBContext{
        Task<ModifiedFile_Table?> InsertModifiedFile(ModifiedFile_Table value);
        Task<ModifiedFile_Table[]> InsertModifiedFiles(params ModifiedFile_Table[] values);

        Task<ModifiedUser_Table?> InsertModifiedUser(ModifiedUser_Table value);
        Task<ModifiedUser_Table[]> InsertModifiedUsers(params ModifiedUser_Table[] values);

        Task<ModifiedUserFile_Table?> InsertModifiedUserFile(ModifiedUserFile_Table value);
        Task<ModifiedUserFile_Table[]> InsertModifiedUserFiles(params ModifiedUserFile_Table[] values);

    }

public class InsertDataApplicationDBContext: I_InsertDataApplicationDBContext{

        private ApplicationDBContext _context;
        public InsertDataApplicationDBContext(ApplicationDBContext context){
            _context=context;
        }
        public async Task<ModifiedFile_Table?> InsertModifiedFile(ModifiedFile_Table value){
            if (value == null)
                return null;

            ModifiedFile val = (ModifiedFile)value!;
            _context.ModifiedFile.Add(val);
            await _context.SaveChangesAsync();
            return (ModifiedFile_Table)val! ;

        }
        public async Task<ModifiedFile_Table[]> InsertModifiedFiles(params ModifiedFile_Table[] values){
        
        if (values == null || values.Length == 0)
            return new ModifiedFile_Table[0];

        ModifiedFile[] vals = values.Select(it=>(ModifiedFile)it!).ToArray();
        _context.ModifiedFile.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (ModifiedFile_Table)it!  ).ToArray();
    }
    
        public async Task<ModifiedUser_Table?> InsertModifiedUser(ModifiedUser_Table value){
            if (value == null)
                return null;

            ModifiedUser val = (ModifiedUser)value!;
            _context.ModifiedUser.Add(val);
            await _context.SaveChangesAsync();
            return (ModifiedUser_Table)val! ;

        }
        public async Task<ModifiedUser_Table[]> InsertModifiedUsers(params ModifiedUser_Table[] values){
        
        if (values == null || values.Length == 0)
            return new ModifiedUser_Table[0];

        ModifiedUser[] vals = values.Select(it=>(ModifiedUser)it!).ToArray();
        _context.ModifiedUser.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (ModifiedUser_Table)it!  ).ToArray();
    }
    
        public async Task<ModifiedUserFile_Table?> InsertModifiedUserFile(ModifiedUserFile_Table value){
            if (value == null)
                return null;

            ModifiedUserFile val = (ModifiedUserFile)value!;
            _context.ModifiedUserFile.Add(val);
            await _context.SaveChangesAsync();
            return (ModifiedUserFile_Table)val! ;

        }
        public async Task<ModifiedUserFile_Table[]> InsertModifiedUserFiles(params ModifiedUserFile_Table[] values){
        
        if (values == null || values.Length == 0)
            return new ModifiedUserFile_Table[0];

        ModifiedUserFile[] vals = values.Select(it=>(ModifiedUserFile)it!).ToArray();
        _context.ModifiedUserFile.AddRange(vals);
        await _context.SaveChangesAsync();
        return vals.Select(it => (ModifiedUserFile_Table)it!  ).ToArray();
    }
    
    
}//end class InsertDataApplicationDBContext

   public interface ISearchDataModifiedFile {
        IAsyncEnumerable<ModifiedFile> ModifiedFileFind_AsyncEnumerable(SearchModifiedFile? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchModifiedFile? search);

        //oneKey    
    public Task<ModifiedFile?> ModifiedFileGetSingle(long id);
    
    
    public  IAsyncEnumerable<ModifiedFile> ModifiedFileSimpleSearch_IDFile(GeneratorFromDB.SearchCriteria sc,  long value);
    public  IAsyncEnumerable<ModifiedFile> ModifiedFileSimpleSearchNull_IDFile(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<ModifiedFile> ModifiedFileSimpleSearch_FullPathFile(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<ModifiedFile> ModifiedFileSimpleSearchNull_FullPathFile(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataModifiedFile: ISearchDataModifiedFile{
        private ApplicationDBContext context;
        public SearchDataModifiedFile (ApplicationDBContext context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.ModifiedFileCount(null);
        }
        public async Task<long> GetAllCount(SearchModifiedFile? search){
            return await context.ModifiedFileCount(search);
        }
        public IAsyncEnumerable<ModifiedFile> ModifiedFileFind_AsyncEnumerable(SearchModifiedFile? search){
            return context.ModifiedFileFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<ModifiedFile?> ModifiedFileGetSingle(long id){
            return context.ModifiedFileGetSingle(id);
    }
    public  IAsyncEnumerable<ModifiedFile> ModifiedFileSimpleSearch(GeneratorFromDB.SearchCriteria sc, eModifiedFileColumns colToSearch, string? value){
        var search =SearchModifiedFile.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchModifiedFile();
            var orderBy = new GeneratorFromDB.OrderBy<eModifiedFileColumns>();
                              orderBy.FieldName = eModifiedFileColumns.IDFile;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eModifiedFileColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.ModifiedFileFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<ModifiedFile> ModifiedFileSimpleSearch_IDFile(GeneratorFromDB.SearchCriteria sc,  long value){
         return ModifiedFileSimpleSearch(sc,eModifiedFileColumns.IDFile,value.ToString());

    
    }
    public  IAsyncEnumerable<ModifiedFile> ModifiedFileSimpleSearchNull_IDFile(GeneratorFromDB.SearchCriteria sc){
        return ModifiedFileSimpleSearch(sc,eModifiedFileColumns.IDFile,null);

    }


        //False
    public  IAsyncEnumerable<ModifiedFile> ModifiedFileSimpleSearch_FullPathFile(GeneratorFromDB.SearchCriteria sc,  string value){
         return ModifiedFileSimpleSearch(sc,eModifiedFileColumns.FullPathFile,value.ToString());

    
    }
    public  IAsyncEnumerable<ModifiedFile> ModifiedFileSimpleSearchNull_FullPathFile(GeneratorFromDB.SearchCriteria sc){
        return ModifiedFileSimpleSearch(sc,eModifiedFileColumns.FullPathFile,null);

    }


        } //class searchdata




    
   public interface ISearchDataModifiedUser {
        IAsyncEnumerable<ModifiedUser> ModifiedUserFind_AsyncEnumerable(SearchModifiedUser? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchModifiedUser? search);

        //oneKey    
    public Task<ModifiedUser?> ModifiedUserGetSingle(long id);
    
    
    public  IAsyncEnumerable<ModifiedUser> ModifiedUserSimpleSearch_IDUser(GeneratorFromDB.SearchCriteria sc,  long value);
    public  IAsyncEnumerable<ModifiedUser> ModifiedUserSimpleSearchNull_IDUser(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<ModifiedUser> ModifiedUserSimpleSearch_NameUser(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<ModifiedUser> ModifiedUserSimpleSearchNull_NameUser(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataModifiedUser: ISearchDataModifiedUser{
        private ApplicationDBContext context;
        public SearchDataModifiedUser (ApplicationDBContext context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.ModifiedUserCount(null);
        }
        public async Task<long> GetAllCount(SearchModifiedUser? search){
            return await context.ModifiedUserCount(search);
        }
        public IAsyncEnumerable<ModifiedUser> ModifiedUserFind_AsyncEnumerable(SearchModifiedUser? search){
            return context.ModifiedUserFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<ModifiedUser?> ModifiedUserGetSingle(long id){
            return context.ModifiedUserGetSingle(id);
    }
    public  IAsyncEnumerable<ModifiedUser> ModifiedUserSimpleSearch(GeneratorFromDB.SearchCriteria sc, eModifiedUserColumns colToSearch, string? value){
        var search =SearchModifiedUser.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchModifiedUser();
            var orderBy = new GeneratorFromDB.OrderBy<eModifiedUserColumns>();
                              orderBy.FieldName = eModifiedUserColumns.IDUser;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eModifiedUserColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.ModifiedUserFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<ModifiedUser> ModifiedUserSimpleSearch_IDUser(GeneratorFromDB.SearchCriteria sc,  long value){
         return ModifiedUserSimpleSearch(sc,eModifiedUserColumns.IDUser,value.ToString());

    
    }
    public  IAsyncEnumerable<ModifiedUser> ModifiedUserSimpleSearchNull_IDUser(GeneratorFromDB.SearchCriteria sc){
        return ModifiedUserSimpleSearch(sc,eModifiedUserColumns.IDUser,null);

    }


        //False
    public  IAsyncEnumerable<ModifiedUser> ModifiedUserSimpleSearch_NameUser(GeneratorFromDB.SearchCriteria sc,  string value){
         return ModifiedUserSimpleSearch(sc,eModifiedUserColumns.NameUser,value.ToString());

    
    }
    public  IAsyncEnumerable<ModifiedUser> ModifiedUserSimpleSearchNull_NameUser(GeneratorFromDB.SearchCriteria sc){
        return ModifiedUserSimpleSearch(sc,eModifiedUserColumns.NameUser,null);

    }


        } //class searchdata




    
   public interface ISearchDataModifiedUserFile {
        IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileFind_AsyncEnumerable(SearchModifiedUserFile? search);
    
    public Task<long> GetAllCount();
    public Task<long> GetAllCount(SearchModifiedUserFile? search);

        //oneKey    
    public Task<ModifiedUserFile?> ModifiedUserFileGetSingle(long id);
    
    
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearch_IDUser(GeneratorFromDB.SearchCriteria sc,  long value);
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearchNull_IDUser(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearch_IDFile(GeneratorFromDB.SearchCriteria sc,  long value);
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearchNull_IDFile(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearch_ModifiedDate(GeneratorFromDB.SearchCriteria sc,  DateTime value);
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearchNull_ModifiedDate(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  long value);
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc);
    
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearch_Contents(GeneratorFromDB.SearchCriteria sc,  string value);
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearchNull_Contents(GeneratorFromDB.SearchCriteria sc);
        } //interface searchdata   

   public class SearchDataModifiedUserFile: ISearchDataModifiedUserFile{
        private ApplicationDBContext context;
        public SearchDataModifiedUserFile (ApplicationDBContext context) {
            this.context=context;
        }
           
        public async Task<long> GetAllCount(){
            return await context.ModifiedUserFileCount(null);
        }
        public async Task<long> GetAllCount(SearchModifiedUserFile? search){
            return await context.ModifiedUserFileCount(search);
        }
        public IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileFind_AsyncEnumerable(SearchModifiedUserFile? search){
            return context.ModifiedUserFileFind_AsyncEnumerable(search);
        }
        //oneKey    
    public Task<ModifiedUserFile?> ModifiedUserFileGetSingle(long id){
            return context.ModifiedUserFileGetSingle(id);
    }
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearch(GeneratorFromDB.SearchCriteria sc, eModifiedUserFileColumns colToSearch, string? value){
        var search =SearchModifiedUserFile.FromSearch(sc,colToSearch,value);
    /*
            var search = new SearchModifiedUserFile();
            var orderBy = new GeneratorFromDB.OrderBy<eModifiedUserFileColumns>();
                              orderBy.FieldName = eModifiedUserFileColumns.ID;
          
            orderBy.Asc = false;
            search.OrderBys = new[] { orderBy };
            search.PageNumber = 1;
            search.PageSize = int.MaxValue;
            var s = new GeneratorFromDB.SearchField<eModifiedUserFileColumns>();
            s.Criteria = sc;
            s.FieldName = colToSearch;
            s.Value = value;
            search.SearchFields = new[] { s };
       */
            var data = this.ModifiedUserFileFind_AsyncEnumerable(search);
            return data;
        }

    
        //False
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearch_IDUser(GeneratorFromDB.SearchCriteria sc,  long value){
         return ModifiedUserFileSimpleSearch(sc,eModifiedUserFileColumns.IDUser,value.ToString());

    
    }
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearchNull_IDUser(GeneratorFromDB.SearchCriteria sc){
        return ModifiedUserFileSimpleSearch(sc,eModifiedUserFileColumns.IDUser,null);

    }


        //False
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearch_IDFile(GeneratorFromDB.SearchCriteria sc,  long value){
         return ModifiedUserFileSimpleSearch(sc,eModifiedUserFileColumns.IDFile,value.ToString());

    
    }
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearchNull_IDFile(GeneratorFromDB.SearchCriteria sc){
        return ModifiedUserFileSimpleSearch(sc,eModifiedUserFileColumns.IDFile,null);

    }


        //False
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearch_ModifiedDate(GeneratorFromDB.SearchCriteria sc,  DateTime value){
         return ModifiedUserFileSimpleSearch(sc,eModifiedUserFileColumns.ModifiedDate,value.ToString());

    
    }
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearchNull_ModifiedDate(GeneratorFromDB.SearchCriteria sc){
        return ModifiedUserFileSimpleSearch(sc,eModifiedUserFileColumns.ModifiedDate,null);

    }


        //False
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearch_ID(GeneratorFromDB.SearchCriteria sc,  long value){
         return ModifiedUserFileSimpleSearch(sc,eModifiedUserFileColumns.ID,value.ToString());

    
    }
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearchNull_ID(GeneratorFromDB.SearchCriteria sc){
        return ModifiedUserFileSimpleSearch(sc,eModifiedUserFileColumns.ID,null);

    }


        //False
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearch_Contents(GeneratorFromDB.SearchCriteria sc,  string value){
         return ModifiedUserFileSimpleSearch(sc,eModifiedUserFileColumns.Contents,value.ToString());

    
    }
    public  IAsyncEnumerable<ModifiedUserFile> ModifiedUserFileSimpleSearchNull_Contents(GeneratorFromDB.SearchCriteria sc){
        return ModifiedUserFileSimpleSearch(sc,eModifiedUserFileColumns.Contents,null);

    }


        } //class searchdata




    
   


//end added new




